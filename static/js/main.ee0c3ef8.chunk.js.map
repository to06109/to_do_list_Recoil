{"version":3,"sources":["atoms.tsx","components/CreateCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["selecCateState","atom","key","default","categoryState","toDoState","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","filter","toDo","CreateCategory","useForm","register","handleSubmit","setValue","setCategory","useSetRecoilState","onSubmit","data","oldCate","placeholder","CreateToDo","setToDos","useRecoilValue","oldToDos","text","id","Date","now","required","ToDo","cate","map","onClick","newCategory","targetIndex","findIndex","newToDo","slice","ToDoList","allToDo","useRecoilState","setSelecCate","useEffect","setItem","stringify","onInput","event","currentTarget","value","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","queryClient","QueryClient","ReactDOM","render","StrictMode","viewColor","accentColor","client","document","getElementById"],"mappings":"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","file":"static/js/main.ee0c3ef8.chunk.js","sourcesContent":["import { atom, selector } from 'recoil'\n\n// toDo배열 설명\nexport interface IToDo {\n  text: string\n  id: number\n  category: string\n}\n\n// 사용자가 선택한 카테고리값\nexport const selecCateState = atom({\n  key: \"selectedCate\",\n  default: \"TO_DO\"\n})\n\n// category 배열\nexport const categoryState = atom({\n  key: 'catagory',\n  default: ['TO_DO', 'DOING', 'DONE', \"DELETE\"],\n})\n\n// ToDo 배열\nexport const toDoState = atom<IToDo[]>({\n  key: 'toDos',\n  default: JSON.parse(localStorage.getItem(\"todo\") || \"[]\"),\n})\n\n// selector\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const toDos = get(toDoState)\n    const category = get(selecCateState)\n    // 사용자가 선택한 카테고리에 따라 하나의 배열만 filter\n    return toDos.filter((toDo) => toDo.category === category)\n  },\n})\n","import { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { categoryState } from \"../atoms\";\r\n\r\ninterface ICategory {\r\n    cate: string,\r\n}\r\n\r\nfunction CreateCategory() {\r\n    const { register, handleSubmit, setValue} = useForm<ICategory>();\r\n    const setCategory = useSetRecoilState(categoryState)\r\n    // 카테고리 추가\r\n    const addCategory = (data: ICategory) => {\r\n        setCategory((oldCate) => [\r\n        data[\"cate\"], ...oldCate,\r\n        ])\r\n        setValue(\"cate\", \"\")\r\n    } \r\n    return (\r\n        <form onSubmit={handleSubmit(addCategory)}>\r\n            <input {...register(\"cate\")} placeholder='Add your own category!'/>\r\n            <button>Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CreateCategory","import { useForm } from 'react-hook-form'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\nimport { selecCateState, toDoState } from '../atoms'\n\n// 사용자 입력값 toDo 설명\ninterface IForm {\n  toDo: string\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState)\n  // 현재 카테고리 받아옴\n  const category = useRecoilValue(selecCateState)\n  const { register, handleSubmit, setValue } = useForm<IForm>()\n  // form의 데이터가 유효할 때 handleSubmit이 호출할 함수\n  const handleValid = ({ toDo }: IForm) => {\n    // ...oldToDos: oldToDos배열 안의 요소를 반환\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ])\n    setValue('toDo', '') // submit 완료하면 input 비우기\n  }\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'Please write a To Do',\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  )\n}\n\nexport default CreateToDo\n","import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\nimport { categoryState, IToDo, selecCateState, toDoState } from '../atoms'\n\nfunction ToDo({ text, id, category }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState)\n  const cate = useRecoilValue(categoryState)\n  // toDos의 카테고리를 바꾸는 함수\n  // const setToDos = useSetRecoilState(toDoState)\n  // newCategory 타입 설명\n  const onClick = (newCategory: IToDo['category']) => {\n    setToDos((oldToDos) => {\n      // toDo의 id가 props에서 온 id와 같은지 비교\n      // -> toDos에서 category바꿀 to do 위치 찾기\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id)\n      // category를 클릭한 버튼으로 바꿔줌\n      const newToDo = { text, id, category: newCategory }\n\n      if (newCategory === \"delete\"){ // 삭제버튼 클릭하면 todo 삭제하기\n        return [\n          ...oldToDos.slice(0, targetIndex),\n          ...oldToDos.slice(targetIndex + 1),\n        ] \n      }\n      else {\n        return [\n          ...oldToDos.slice(0, targetIndex),\n          newToDo,\n          ...oldToDos.slice(targetIndex + 1),\n        ]\n      }\n    })\n  }\n  return (\n    <li>\n      <span>{text}</span>\n      {/* 선택된 카테고리 빼고 버튼 보여주기  */}\n      {cate.map((cate) => {\n        if(cate !== category){\n          return <button onClick={() => onClick(cate)}>{cate}</button>\n        }\n      })}\n    </li>\n  )\n}\n\nexport default ToDo\n","import React, { useEffect } from 'react'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\nimport { categoryState, selecCateState, toDoSelector, toDoState } from '../atoms'\nimport CreateCategory from './CreateCategory'\nimport CreateToDo from './CreateToDo'\nimport ToDo from './ToDo'\n\nfunction ToDoList() {\n  const allToDo = useRecoilValue(toDoState)\n  // category배열 접근 및 수정\n  const [category] = useRecoilState(categoryState)\n  // 선택한 카테고리 접근\n  const setSelecCate = useSetRecoilState(selecCateState)\n  // selector를 이용해 현재 선택한 카테고리에 해당하는 todo배열을 받음\n  const toDos = useRecoilValue(toDoSelector)\n  \n  // localStorage로 persistance\n  useEffect(() => {\n    localStorage.setItem(\"todo\", JSON.stringify(allToDo))\n  })\n\n  // select 변경 감지\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setSelecCate(event.currentTarget.value as any)\n  }\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select onInput={onInput}>\n        {category.map(cate => {\n          if(cate !== \"DELETE\") {\n            return <option value={cate}>{cate}</option>\n          }\n        })}\n      </select>\n      <CreateCategory />\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  )\n}\n\nexport default ToDoList","import { createGlobalStyle } from 'styled-components'\nimport ToDoList from './components/ToDoList'\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  // 폰트 설정\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n  line-height: 1.2;\n\n}\na {\n  // 모든 링크가 밑줄 갖지 않게\n  text-decoration: none;\n  // 부모한테서 색 가져오라고\n  color: inherit;\n}\n`\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { RecoilRoot } from 'recoil'\nimport { ThemeProvider } from 'styled-components'\nimport { darkTheme} from './theme'\n\nimport App from './App'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <QueryClientProvider client={queryClient}>\n          <App />\n        </QueryClientProvider>\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import styled, { DefaultTheme } from 'styled-components'\n\n// 여기에 우리 테마를 만들거임\nexport const darkTheme: DefaultTheme = {\n  viewColor: '#353b48',\n  bgColor: '#2f3640',\n  textColor: '#f5f6fa',\n  accentColor: '#8c7ae6',\n}\n\nexport const lightTheme: DefaultTheme = {\n  viewColor: '#dcdde1',\n  bgColor: '#f5f6fa',\n  textColor: '#2f3640',\n  accentColor: '#8c7ae6',\n}\n"],"sourceRoot":""}