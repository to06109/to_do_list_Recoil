{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","newCategory","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoList","useRecoilState","setCategory","value","onInput","event","currentTarget","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","queryClient","QueryClient","ReactDOM","render","StrictMode","viewColor","accentColor","client","document","getElementById"],"mappings":"wIAEYA,E,yFAAAA,O,iBAAAA,I,iBAAAA,I,gBAAAA,M,KAeL,IAAMC,EAAgBC,YAAiB,CAC5CC,IAAK,WACLC,QAASJ,EAAWK,QAKTC,EAAYJ,YAAc,CACrCC,IAAK,QACLC,QAAS,KAGEG,EAAeC,YAAS,CACnCL,IAAK,eACLM,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIR,GAErB,OAAOS,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,sBCErCG,MA5Bf,WAEE,IAAMC,EAAWC,YAAkBV,GAE7BK,EAAWM,YAAehB,GAChC,EAA6CiB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAUhC,OACE,uBAAMC,SAAUF,GATE,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,KAErBE,GAAS,SAACQ,GAAD,OACP,CAAEC,KAAMX,EAAMY,GAAIC,KAAKC,MAAOhB,SAAUA,IADjC,mBAEJY,OAELF,EAAS,OAAQ,OAGjB,UACE,iDACMF,EAAS,OAAQ,CACnBS,SAAU,0BAFd,IAIEC,YAAY,mBAEd,6CCQSC,MArCf,YAA8C,IAA9BN,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,GAAId,EAAmB,EAAnBA,SAElBI,EAAWC,YAAkBV,GAE7ByB,EAAU,SAACC,GACfjB,GAAS,SAACQ,GAGR,IAAMU,EAAcV,EAASW,WAAU,SAACrB,GAAD,OAAUA,EAAKY,KAAOA,KAEvDU,EAAU,CAAEX,OAAMC,KAAId,SAAUqB,GACtC,MAAM,GAAN,mBACKT,EAASa,MAAM,EAAGH,IADvB,CAEEE,GAFF,YAGKZ,EAASa,MAAMH,EAAc,SAItC,OACE,+BACE,+BAAOT,IAENb,IAAaX,EAAWqC,OAGvB,wBAAQN,QAAS,kBAAMA,EAAQ/B,EAAWqC,QAA1C,mBAED1B,IAAaX,EAAWK,OACvB,wBAAQ0B,QAAS,kBAAMA,EAAQ/B,EAAWK,QAA1C,mBAEDM,IAAaX,EAAWsC,MACvB,wBAAQP,QAAS,kBAAMA,EAAQ/B,EAAWsC,OAA1C,sBCOOC,I,EAAAA,EAjCf,WAKE,IAAM7B,EAAQO,YAAeV,GAE7B,EAAgCiC,YAAevC,GAA/C,mBAAOU,EAAP,KAAiB8B,EAAjB,KASA,OACE,gCACE,wCACA,uBACA,yBAAQC,MAAO/B,EAAUgC,QAVb,SAACC,GAIfH,EAAYG,EAAMC,cAAcH,QAM9B,UACE,wBAAQA,MAAO1C,EAAWK,MAA1B,mBACA,wBAAQqC,MAAO1C,EAAWqC,MAA1B,mBACA,wBAAQK,MAAO1C,EAAWsC,KAA1B,qBAEF,cAAC,EAAD,IARF,OASG5B,QATH,IASGA,OATH,EASGA,EAAOoC,KAAI,SAACjC,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKY,WChClBsB,EAAcC,YAAH,qqDAwDK,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAoBnBC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,QClEAO,EAAc,IAAIC,cAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeR,MCXkB,CACrCS,UAAW,UACXR,QAAS,UACTC,UAAW,UACXQ,YAAa,WDOT,SACE,cAAC,sBAAD,CAAqBC,OAAQP,EAA7B,SACE,cAAC,EAAD,YAKRQ,SAASC,eAAe,W","file":"static/js/main.ea791529.chunk.js","sourcesContent":["import { atom, selector } from 'recoil'\r\n\r\nexport enum categories {\r\n  'TO_DO',\r\n  'DOING',\r\n  'DONE',\r\n}\r\n\r\n// toDo배열 설명\r\nexport interface IToDo {\r\n  text: string\r\n  id: number\r\n  // 카테고리: 할 일(TO_DO), 하고있는 일(DOING), 한 일(DONE)\r\n  category: categories\r\n}\r\n\r\n// categoryState의 값이 'TO_DO' | 'DOING' | 'DONE' 일 거라고 알려줌\r\nexport const categoryState = atom<categories>({\r\n  key: 'catagory',\r\n  default: categories.TO_DO,\r\n})\r\n\r\n// atom 만들기\r\n// atom의 type은 ToDo 배열\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: 'toDos',\r\n  default: [],\r\n})\r\n\r\nexport const toDoSelector = selector({\r\n  key: 'toDoSelector',\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState)\r\n    const category = get(categoryState)\r\n    // 카테고리에 따라 하나의 배열만 filter\r\n    return toDos.filter((toDo) => toDo.category === category)\r\n  },\r\n})\r\n","import { useForm } from 'react-hook-form'\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\r\nimport { categoryState, toDoState } from '../atoms'\r\n\r\n// 사용자 입력값 toDo 설명\r\ninterface IForm {\r\n  toDo: string\r\n}\r\n\r\nfunction CreateToDo() {\r\n  // atom 수정만 하면됨\r\n  const setToDos = useSetRecoilState(toDoState)\r\n  // 현재 카테고리 받아옴\r\n  const category = useRecoilValue(categoryState)\r\n  const { register, handleSubmit, setValue } = useForm<IForm>()\r\n  // form의 데이터가 유효할 때 handleSubmit이 호출할 함수\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    // ...oldToDos: oldToDos배열 안의 요소를 반환\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, id: Date.now(), category: category },\r\n      ...oldToDos,\r\n    ])\r\n    setValue('toDo', '') // submit 완료하면 input 비우기\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register('toDo', {\r\n          required: 'Please write a To Do',\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CreateToDo\r\n","import { useSetRecoilState } from 'recoil'\r\nimport { categories, IToDo, toDoState } from '../atoms'\r\n\r\nfunction ToDo({ text, id, category }: IToDo) {\r\n  // toDos의 카테고리를 바꾸는 함수\r\n  const setToDos = useSetRecoilState(toDoState)\r\n  // newCategory 타입 설명\r\n  const onClick = (newCategory: IToDo['category']) => {\r\n    setToDos((oldToDos) => {\r\n      // toDo의 id가 props에서 온 id와 같은지 비교\r\n      // -> toDos에서 category바꿀 to do 위치 찾기\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id)\r\n      // category를 클릭한 버튼으로 바꿔줌\r\n      const newToDo = { text, id, category: newCategory }\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ]\r\n    })\r\n  }\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {/* 카테고리가 DOING이 아닐 때만 Doing버튼 보여주기 */}\r\n      {category !== categories.DOING && (\r\n        // 인자가 있는 onClick 처리하기\r\n        // 무슨 버튼이 눌렸는지 onClick함수에 인자로 넘겨줌\r\n        <button onClick={() => onClick(categories.DOING)}>Doing</button>\r\n      )}\r\n      {category !== categories.TO_DO && (\r\n        <button onClick={() => onClick(categories.TO_DO)}>To Do</button>\r\n      )}\r\n      {category !== categories.DONE && (\r\n        <button onClick={() => onClick(categories.DONE)}>Done</button>\r\n      )}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ToDo\r\n","import React, { useState } from 'react'\r\n\r\nimport { useForm } from 'react-hook-form'\r\nimport { atom, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\r\nimport { categories, categoryState, toDoSelector, toDoState } from '../atoms'\r\nimport CreateToDo from './CreateToDo'\r\nimport ToDo from './ToDo'\r\n\r\nfunction ToDoList() {\r\n  // toDos에 접근\r\n  // const toDos = useRecoilValue(toDoState)\r\n\r\n  // selector를 이용해 현재 카테고리에 해당하는 todo배열을 받음\r\n  const toDos = useRecoilValue(toDoSelector)\r\n  // select값과 atom 연결\r\n  const [category, setCategory] = useRecoilState(categoryState)\r\n\r\n  // select 변경 감지\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    // select의 value알려줌\r\n    // setCategory의 type은 세 카테고리 중 하나여야 하는데\r\n    // value는 그냥 string으로만 봐서 as any 붙여줘야함\r\n    setCategory(event.currentTarget.value as any)\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={categories.TO_DO}>To Do</option>\r\n        <option value={categories.DOING}>Doing</option>\r\n        <option value={categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList\r\n","import { createGlobalStyle } from 'styled-components'\nimport ToDoList from './components/ToDoList'\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  // 폰트 설정\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n  line-height: 1.2;\n\n}\na {\n  // 모든 링크가 밑줄 갖지 않게\n  text-decoration: none;\n  // 부모한테서 색 가져오라고\n  color: inherit;\n}\n`\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { RecoilRoot } from 'recoil'\nimport { ThemeProvider } from 'styled-components'\nimport { darkTheme} from './theme'\n\nimport App from './App'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <QueryClientProvider client={queryClient}>\n          <App />\n        </QueryClientProvider>\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import styled, { DefaultTheme } from 'styled-components'\r\n\r\n// 여기에 우리 테마를 만들거임\r\nexport const darkTheme: DefaultTheme = {\r\n  viewColor: '#353b48',\r\n  bgColor: '#2f3640',\r\n  textColor: '#f5f6fa',\r\n  accentColor: '#8c7ae6',\r\n}\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  viewColor: '#dcdde1',\r\n  bgColor: '#f5f6fa',\r\n  textColor: '#2f3640',\r\n  accentColor: '#8c7ae6',\r\n}\r\n"],"sourceRoot":""}